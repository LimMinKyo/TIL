* 자바스크립트

1. 웹 브라우저에서 읽고 실행되는 언어
2. 보안성이 없음
3. html 내에 작성
4. 대소문자의 구분 엄격(aaa AAA)

* 적용 방법

1. 내부 스크립트

- html 문서 내에 스크립트 정의 후 직접 작성
- 필요한 위치에
  <script type="text/javascript">
    스크립트 효과
  </script>

2. 외부 스크립트

- 스크립트 효과를 다른 문서에 작성하고 "이름.js"로 저장
- 효과를 적용할 문서에
  <script type="text/javascript" src="이름.js">
    다른 문장 작성 금지
  </script>

* 스크립트 주석

1. // : 한 줄 주석
2. /* */ : 여러 줄 주석

*** 자료형(Data Type) ***  
연산에 사용되는 값의 종류

* 상수 : 값이 정해져 있는 형식

1. 정수

- 음수(-), 소수(.) 를 제외한 양의 실수
- 8진수, 16진수 포함

2. 실수

- 실제 사용 가능한 모든 수

3. 문자형 상수(string)

- 일반적인 텍스트
- "" 사용

4. 불린(boolean)

- true(1) / false(0) 의 형식

5. null

- 값이 없음

* 변수(variable)

1. 변할 수 있는 값
2. 값을 저장하는 장소나 이름
3. 변수 선언문

- var : 변수 재선언 & 변수 재할당 가능, 생략 가능
  ex) var abc
- let : 변수에 재할당
- const : 변수 재선언, 변수 재할당 불가능

4. 선언과 동시에 값 입력 가능
   ex) var abc = 1

var abc
abc = 1

var a, b, c
a = 1
b = 2
c = 3

var a, b, c = 1

var a=b=c=1

* var 변수이름 = 값

** 이름 규칙 **

1. 알파벳, 숫자 사용 가능
2. 한글, 특수문자, 공백 사용 불가
  (단 특수문자 중 "_"는 사용 가능)
3. 첫번째 글자는 "_" 또는 알파벳만 가능
4. 대소문자 반드시 구분
5. 예약어 사용 불가

** 연산자 **

* 산술 연산자

  1. +
  2. -
  3. *
  4. /
  5. % : 두개의 수를 나눈 나머지
    10 / 3 = 3.333334
    10 % 3 = 1

* 연결 연산자

1. + : 연산자의 좌변과 우변의 값이 산술 연산이 불가능한 경우 두 개의 값을 이어주는 연산자

ex) 1+2=3 <--- 산술 연산이 가능하므로 "산술연산자"
"a"+1=a1 <-- 두 개의 값을 연결하는 "연결 연산자"

* 비교 연산자 : 결과값이 true / false 로 출력
1. >
2. <
3. == : "=" 는 저장의 의미, "=="는 비교의 의미
4. <=
5. >=
6. != : ! = not, 다르다(같지 않다)
  a == b
  a != b

* 논리 연산자
  좌변과 우변의 식을 검토하여 결과 산출

  1. &&(and) : 좌변과 우변의 식이 모두 참인 경우에 참값 반환
  2. ||(or) : 좌변과 우변의 식 중 하나라도 참이면 참값 반환
  3. ^(Xor) : 좌변과 우뱐이 하나만 참인 경우 참값 반환
  4. !(not) : 반대 값 반환

* 비트식 연산자
논리 연산자와 같은 연산자이지만 연산 기호가 1개이고 값이 1(ture), 0 (false) 로 출력

* 대입 연산자
1. "=" 기호가 들어간 연산식
2. 좌변과 우변에 동일식이 존재하는 경우 약식 가능

  ex) a = a + b ------> a += b
      a = a - b ------> a -= b
      a = a * b ------> a *= b
      a = a / b ------> a /= b
      a = a % b ------> a %= b

* 증감 연산자
1. 변수의 값을 증가 또는 감소시키는 연산자
2. 연산기호 : ++, --
3. 증감 범위 : +-1
4. 선행처리(++a), 후행처리(a++)

  a = 100
    a++ : 100+1, 101+1, 102+1.....
    ++a : 101, 102, 103.....

    a-- : 100-1, 99-1, 98-1.....
    --a : 99, 98, 97.....

* 조건삼항 연산자
조건의 결과에 따라 다른 값 출력

1. (조건)? 조건이 참일 경우 : 조건이 거짓인 경우

** 제어문 **
해당 언어를 효율적으로 사용하기 위한 문장
1. 조건문
2. 반복문

** 반복문 **
1. 규칙적으로 실행되는 문장을 직접 작성하지 않고 여러 번 실행시키는 문장
2. for
3. while
4. do while

* while
1. 조건 + 반복문
2. while(조건){
  조건이 참인 동안 반복할 문장
}

* for
1. 형식
  for(시작값; 최종값; 증감식){
    반복할 문장
  }
  
2. 시작값 선언시 변수 선언과 동시에 사용 가능
  ex) 일반적인 사용 예
  var a = 1
      b = 2
  for(a=1; a<=10; a++){
    document.write("무궁화 꽃이 피었습니다.")
  }

  ex) for 문의 사용 예
  for(var a=1; a<=10; a++){}
  for(a=1; a<=10; a++){} // var 생략
  for(a=1, b=2; a<=10; a++){} // 여러 개의 변수 선언

3. 다중 반복문
  for(시작값; 최종값; 증감식){
    for(시작값; 최종값; 증감식){
      반복할 문장
    }
  }

** 함수 **
미리 약속되어 있는 명령어

1. 내장 함수 - 만들어져 있는 명령어
2. 사용자 정의 함수 - 만들어서 사용하는 명령어

** 내장 함수
1. 대화상자 함수
  - alert("문자열") : 메세지 상자
  - confirm("문자열") : 확인 / 취소 선택 상자
  - prompt("질문메세지", "초기메세지") : 사용자 입력 상자

** 조건문 **
1. 조건의 결과에 따라 다른 문장을 실행
2. if
3. switch

** if문 **
조건이 참인 경우 다음 문장을 실행

1. if(조건) 조건이 참인 경우 실행할 문장
2. if문의 다수 사용
  - 각각의 조건이 독립적

if(조건1)
  문장1
  문장2
if(조건2)
  문장3

3. 중괄호 사용
  - 여러 개의 문장을 하나의 조건문에 종속

4. if ~ else
  - if(조건){
    조건이 참인 경우 실행할 문장
  } else { // if의 조건이 참이 아닌 나머지 모두
    조건이 참이 아닌 경우 실행할 문장
  }

5. if ~ else if
  - if(조건1) {
    조건1이 참인 경우 실행할 문장
  } else if(조건2) {
    조건1이 참이 아니고 조건2가 참인 경우 실행할 문장
  }

6. if ~ else if
- if(조건1) {
  조건1이 참인 경우 실행할 문장
} else if(조건2) {
  조건1이 참이 아니고 조건2가 참인 경우 실행할 문장
} else {
  조건1과 조건2가 참이 아닌 경우 실행할 문장
}

* switch 문 *

switch(변수) {
  case "값1" : 변수값이 "값1"인 경우 실행할 문장
          break;
  case "값2" : 변수값이 "값2"인 경우 실행할 문장
          break;
  case "값3" : 변수값이 "값3"인 경우 실행할 문장
          break;
  default : 변수값이 "값1","값2","값3"이 아닌 경우 실행할 문장
}

** 사용자 정의 함수 **
1. 사용자가 임의로 생성한 함수
2. 선언문: function
3. function 함수명(매개변수,매개변수...){
  실행문
  실행문
  .
  .
}
4. 호출 시에만 실행
5. 사용자 정의 함수 호출방법
  - 단독 실행
  - 변수에 의한 실행
  - 다른 함수에 의한 실행
  - 이벤트에 의한 실행(*******)
6. 함수명 규칙 : 변수명 규칙과 동일

** 이벤트 **
1. 언제
2. 이벤트 : 상황, ~~하다
3. 이벤트 핸들러 : 이벤트 사용, ~~ 했을 때 
              이벤트 앞에 on 추가

  이벤트           이벤트 핸들러
  load            onload
  unload          onunload
  mouseover       onmouseover
  mouseout        onmouseout
  focus           onfocus
  blur            onblur
  click           onclick
  mousedown       onmousedown
  mouseup         onmouseup

  ** DOM(Document Object Model) 방식 **
  - html 요소에 접근하는 표준화된 방식
  - 기존 name 속성과 태그별 접근 방식에서 벗어나 오브젝트의 종류에 상관없이 id 속성을 사용하여 요소에 접근하는 방식

  * getElementById("요소") 객체의 생성

  * 자바스크립트

  1. 표준 모델 : ECMAScript 6(ES6)

  2. 라이브러리 : 파일 형태로 제공되는 완성된 효과
  - jquery.js
  - angular.js
  
  3. 서버 관련 스크립트
  - node.js

  4. 프레임워크
  - react.js
  - 파이썬
  - vue.js
  - angular.js

  5. 동작 방식
  - ajax : 비동기식 스크립트
  - DOM : HTML 요소 선택